[user]
	name = Doug Ilijev
	email = doug.ilijev@gmail.com

[alias]
	st = status
	ci = commit
	cm = commit -m
	ca = commit -am
	au = add -u
	amend = commit --amend --no-edit            # amend previous commit, don't change message
	check = commit -m "[checkpoint]"            # make a quick commit to be amended later
	co = checkout
	br = branch
	bv = branch -vv --no-color
	s = status
	ss = status -s
	changed = "!git diff $1~1 $1 #"
	changes = "!git diff --stat $1~1 $1 #"
	df = diff
	dc = diff --cached
	dn = diff --name-status
	dnn = diff --name-only
	dnn1 = diff --name-only HEAD~1
	dcn = diff --cached --name-status
	dcnn = diff --cached --name-only
	dst = diff --stat
	dcst = diff --cached --stat
	dcsst = diff --cached --shortstat
	sn = show --name-status
	snn = show --name-only
	st = show --stat
	sst = show --shortstat
	msg = show --name-status --pretty=full      # get the full (multiline) message for the current commit, and files changed
	lsf = ls-files
	fp = fetch --all -p                         # fetch and prune all branches from all remotes
	ff = merge --ff-only
	fg = "!git lsf | grep --color=auto -i $* #"     # "file grep"
	gr = grep -i -n --color=auto
	mt = mergetool
	rc = rebase --continue
	ra = rebase --abort
	pick = cherry-pick
	pk = cherry-pick
	rv = remote -v
	sup = submodule update
	undo = reset --hard HEAD
	glog = log --graph
	lg = log --pretty=crispy -10
	lga = log --pretty=crispy
	lf = log --pretty=crispy --first-parent -10
	lfa = log --pretty=crispy --first-parent
	gl = log --graph --pretty=crisp -10
	gla = log --graph --pretty=crisp
	cf = config
	cfg = config --global
	cfl = config -l
	cfgl = config --global -l
	hash = rev-parse
	head = rev-parse HEAD
	this = rev-parse --abbrev-ref HEAD          # get the name of the current branch, for scripting
	has = branch -a --contains                  # which branches contain the current commit
	branches = "for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs/remotes"

[alias] # experimental scripted commands
	## Figure out the original branch
	tracking = !sh -c 'git rev-parse --abbrev-ref --symbolic-full-name $1@{u}'

	# take the result of $(git tracking) and use sed to find just the name of the remote
	# sed -e "s/\\/.*//" # match a literal '/' to the end of the line and replace with nothing
	tracking-remote = !sh -c 'git rev-parse --abbrev-ref --symbolic-full-name $1@{u} | sed -e s/[/].*//' $1
	tr = !git tracking-remote

	# fetch this branch from the tracking-remote, and then fast-forward the local branch
	ffp = "!sh -c 'git fetch $(git tracking-remote) $(git this); git merge --ff-only'"

	## Show changes only in the current branch
	dt = !git diff $(git merge-base $(git tracking) HEAD)

	## Show commits only in the current branch
	lt = !git lg $(git tracking)..

	## List all commits present in this branch that are not present in the named branch
	pending = !git lga $(git merge-base HEAD master)..HEAD

	## List everyone who worked in this file or tree
	authors = "!sh -c 'git log --pretty=\"%an <%ae>\" $* | sort | uniq' $*"
	authors-name-only = "!sh -c 'git log --pretty=\"%an\" $* | sort | uniq' $*"

[pretty]
	#compact = [%h]  %ad  (%an <%ae>)%n    %s%n
	compact = %C(auto)[ %h ]  %ad  (%C(green dim)%an <%ae>%Creset%C(auto))%n    %s%n
	crisp = %C(auto)%h %C(green dim)%<(10,trunc)%ae%Creset%C(auto)%d %s
	crispy = [ %C(auto)%h ] %ad %C(green dim)%<(10,trunc)%ae%Creset%C(auto)%d %s
	crispy-nocolor = [ %h ] %ad | %<(10,trunc)%ae | %s                                      # display crispy with no color formatting (to make it easier to read when saved to a file)
	sweet = %C(auto)%h %C(green dim)%<(10,trunc)%ae%Creset%C(auto)%d %<(80,trunc)%s         # same as crisp with truncation of the message to 80 char
[format]
	pretty = compact
[log]
	date = format:"%Y-%m-%d %H:%M"
[push]
	default = simple

[merge]
	tool = kdiff3
[credential]
	helper = store
